// <auto-generated />
using System;
using HotelFinder.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HotelFinder.Backend.Migrations
{
    [DbContext(typeof(HotelFinderContext))]
    partial class HotelFinderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("HotelsId")
                        .HasColumnType("int");

                    b.HasKey("FacilitiesId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("FacilityHotel");
                });

            modelBuilder.Entity("HotelFinder.Backend.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Nights")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("HotelFinder.Backend.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageURL = "WifiURL",
                            Title = "Wifi"
                        },
                        new
                        {
                            Id = 2,
                            ImageURL = "SpaURL",
                            Title = "Spa"
                        },
                        new
                        {
                            Id = 3,
                            ImageURL = "ParkingURL",
                            Title = "Parking"
                        },
                        new
                        {
                            Id = 4,
                            ImageURL = "BreakfastURL",
                            Title = "Breakfast"
                        });
                });

            modelBuilder.Entity("HotelFinder.Backend.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address 1",
                            Description = "Lorem ipsum 1",
                            Name = "Dummy Hotel 1",
                            Price = 1000m,
                            Rate = 5f
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address 2",
                            Description = "Lorem ipsum 2",
                            Name = "Dummy Hotel 2",
                            Price = 200m,
                            Rate = 3f
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address 3",
                            Description = "Lorem ipsum 3",
                            Name = "Dummy Hotel 3",
                            Price = 2400m,
                            Rate = 4f
                        });
                });

            modelBuilder.Entity("HotelFinder.Backend.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Picture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            Title = "Hotel1Pict1",
                            URL = "PictUrl"
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 1,
                            Title = "Hotel1Pict2",
                            URL = "PictUrl"
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 2,
                            Title = "Hotel2Pict1",
                            URL = "PictUrl"
                        },
                        new
                        {
                            Id = 4,
                            HotelId = 2,
                            Title = "Hotel2Pict2",
                            URL = "PictUrl"
                        },
                        new
                        {
                            Id = 5,
                            HotelId = 3,
                            Title = "Hotel3Pict1",
                            URL = "PictUrl"
                        },
                        new
                        {
                            Id = 6,
                            HotelId = 3,
                            Title = "Hotel3Pict2",
                            URL = "PictUrl"
                        });
                });

            modelBuilder.Entity("HotelFinder.Backend.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<float>("SelectedRate")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Rates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            SelectedRate = 5f,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 2,
                            SelectedRate = 4f,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 3,
                            SelectedRate = 3f,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HotelFinder.Backend.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            Text = "Great service.",
                            Title = "Fantastic!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            HotelId = 2,
                            Text = "Low cleanliness standards.",
                            Title = "Horrible!",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            HotelId = 3,
                            Text = "Nothing to add",
                            Title = "Okay",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HotelFinder.Backend.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mail@mail1.com",
                            Password = "Pass1",
                            Username = "Dummy user 1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mail@mail2.com",
                            Password = "Pass2",
                            Username = "Dummy user 2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mail@mail3.com",
                            Password = "Pass3",
                            Username = "Dummy user 3"
                        });
                });

            modelBuilder.Entity("FacilityHotel", b =>
                {
                    b.HasOne("HotelFinder.Backend.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelFinder.Backend.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelFinder.Backend.Booking", b =>
                {
                    b.HasOne("HotelFinder.Backend.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelFinder.Backend.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelFinder.Backend.Picture", b =>
                {
                    b.HasOne("HotelFinder.Backend.Hotel", "Hotel")
                        .WithMany("Pictures")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelFinder.Backend.Rate", b =>
                {
                    b.HasOne("HotelFinder.Backend.Hotel", "Hotel")
                        .WithMany("Rates")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelFinder.Backend.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelFinder.Backend.Review", b =>
                {
                    b.HasOne("HotelFinder.Backend.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelFinder.Backend.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelFinder.Backend.Hotel", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Rates");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HotelFinder.Backend.User", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
